/**
 ******************************************************************************
 *
 * @file       navigationsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Implementation of the NavigationSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: navigationsettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef NAVIGATIONSETTINGS_H
#define NAVIGATIONSETTINGS_H

// Object constants
#define NAVIGATIONSETTINGS_OBJID 1350892244U
#define NAVIGATIONSETTINGS_NAME "NavigationSettings"
#define NAVIGATIONSETTINGS_METANAME "NavigationSettingsMeta"
#define NAVIGATIONSETTINGS_ISSINGLEINST 1
#define NAVIGATIONSETTINGS_ISSETTINGS 1
#define NAVIGATIONSETTINGS_NUMBYTES sizeof(NavigationSettingsData)

// Object access macros
#define NavigationSettingsGet(dataOut) UAVObjGetData(NavigationSettingsHandle(), dataOut)
#define NavigationSettingsSet(dataIn) UAVObjSetData(NavigationSettingsHandle(), dataIn)
#define NavigationSettingsInstGet(instId, dataOut) UAVObjGetInstanceData(NavigationSettingsHandle(), instId, dataOut)
#define NavigationSettingsInstSet(instId, dataIn) UAVObjSetInstanceData(NavigationSettingsHandle(), instId, dataIn)
#define NavigationSettingsConnectQueue(queue) UAVObjConnectQueue(NavigationSettingsHandle(), queue, EV_MASK_ALL_UPDATES)
#define NavigationSettingsConnectCallback(cb) UAVObjConnectCallback(NavigationSettingsHandle(), cb, EV_MASK_ALL_UPDATES)
#define NavigationSettingsCreateInstance() UAVObjCreateInstance(NavigationSettingsHandle())
#define NavigationSettingsRequestUpdate() UAVObjRequestUpdate(NavigationSettingsHandle())
#define NavigationSettingsRequestInstUpdate(instId) UAVObjRequestInstanceUpdate(NavigationSettingsHandle(), instId)
#define NavigationSettingsUpdated() UAVObjUpdated(NavigationSettingsHandle())
#define NavigationSettingsInstUpdated(instId) UAVObjUpdated(NavigationSettingsHandle(), instId)
#define NavigationSettingsGetMetadata(dataOut) UAVObjGetMetadata(NavigationSettingsHandle(), dataOut)
#define NavigationSettingsSetMetadata(dataIn) UAVObjSetMetadata(NavigationSettingsHandle(), dataIn)

// Object data
typedef struct {
    uint16_t UpdatePeriod;
    float AccelerationMax;
    float SpeedMax;
    float SpeedSafe;
    float SpeedMin;
    float SettleTime;
    float TurnSpeedFactor;
    float StabilizationForceFactor;

} __attribute__((packed)) NavigationSettingsData;

// Field information
// Field UpdatePeriod information
// Field AccelerationMax information
// Field SpeedMax information
// Field SpeedSafe information
// Field SpeedMin information
// Field SettleTime information
// Field TurnSpeedFactor information
// Field StabilizationForceFactor information


// Generic interface functions
int32_t NavigationSettingsInitialize();
UAVObjHandle NavigationSettingsHandle();

#endif // NAVIGATIONSETTINGS_H
