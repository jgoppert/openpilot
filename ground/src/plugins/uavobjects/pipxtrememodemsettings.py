##
##############################################################################
#
# @file       pipxtrememodemsettings.py
# @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
# @brief      Implementation of the PipXtremeModemSettings object. This file has been 
#             automatically generated by the UAVObjectGenerator.
# 
# @note       Object definition file: pipxtrememodemsettings.xml. 
#             This is an automatically generated file.
#             DO NOT modify manually.
#
# @see        The GNU Public License (GPL) Version 3
#
#############################################################################/
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#


import uavobject

import struct
from collections import namedtuple

# This is a list of instances of the data fields contained in this object
_fields = [ \
	uavobject.UAVObjectField(
		'Mode',
		'b',
		1,
		[
			'0',
		],
		{
			'0' : 'Normal',
			'1' : 'Test_Carrier',
			'2' : 'Test_Spectrum',
		}
	),
	uavobject.UAVObjectField(
		'Serial_Baudrate',
		'b',
		1,
		[
			'0',
		],
		{
			'0' : '1200',
			'1' : '2400',
			'2' : '4800',
			'3' : '9600',
			'4' : '19200',
			'5' : '38400',
			'6' : '57600',
			'7' : '115200',
			'8' : '230400',
		}
	),
	uavobject.UAVObjectField(
		'Frequency_Calibration',
		'B',
		1,
		[
			'0',
		],
		{
		}
	),
	uavobject.UAVObjectField(
		'Frequency_Min',
		'I',
		1,
		[
			'0',
		],
		{
		}
	),
	uavobject.UAVObjectField(
		'Frequency_Max',
		'I',
		1,
		[
			'0',
		],
		{
		}
	),
	uavobject.UAVObjectField(
		'Frequency',
		'I',
		1,
		[
			'0',
		],
		{
		}
	),
	uavobject.UAVObjectField(
		'Max_RF_Bandwidth',
		'b',
		1,
		[
			'0',
		],
		{
			'0' : '500',
			'1' : '1000',
			'2' : '2000',
			'3' : '4000',
			'4' : '8000',
			'5' : '9600',
			'6' : '16000',
			'7' : '19200',
			'8' : '24000',
			'9' : '32000',
			'10' : '64000',
			'11' : '128000',
			'12' : '192000',
		}
	),
	uavobject.UAVObjectField(
		'Max_Tx_Power',
		'b',
		1,
		[
			'0',
		],
		{
			'0' : '1',
			'1' : '2',
			'2' : '5',
			'3' : '8',
			'4' : '11',
			'5' : '14',
			'6' : '17',
			'7' : '20',
		}
	),
	uavobject.UAVObjectField(
		'AES_Encryption',
		'b',
		1,
		[
			'0',
		],
		{
			'0' : 'False',
			'1' : 'True',
		}
	),
	uavobject.UAVObjectField(
		'AES_EncryptionKey',
		'B',
		16,
		[
			'0',
			'1',
			'2',
			'3',
			'4',
			'5',
			'6',
			'7',
			'8',
			'9',
			'10',
			'11',
			'12',
			'13',
			'14',
			'15',
		],
		{
		}
	),
	uavobject.UAVObjectField(
		'Paired_Serial_Number',
		'I',
		1,
		[
			'0',
		],
		{
		}
	),
]


class PipXtremeModemSettings(uavobject.UAVObject):
    ## Object constants
    OBJID        = 3822692478
    NAME         = "PipXtremeModemSettings"
    METANAME     = "PipXtremeModemSettingsMeta"
    ISSINGLEINST = 1
    ISSETTINGS   = 1

    def __init__(self):
        uavobject.UAVObject.__init__(self,
                                     self.OBJID, 
                                     self.NAME,
                                     self.METANAME,
                                     0,
                                     self.ISSINGLEINST)

        for f in _fields:
            self.add_field(f)
        
    def __str__(self):
        s  = ("0x%08X (%10u)  %-30s  %3u bytes  format '%s'\n"
                 % (self.OBJID, self.OBJID, self.NAME, self.get_struct().size, self.get_struct().format))
        for f in self.get_tuple()._fields:
            s += ("\t%s\n" % f)
        return (s)

def main():
    # Instantiate the object and dump out some interesting info
    x = PipXtremeModemSettings()
    print (x)

if __name__ == "__main__":
    #import pdb ; pdb.run('main()')
    main()
